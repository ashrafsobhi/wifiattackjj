{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/google-genai';\n\nexport const ai = genkit({\n  plugins: [googleAI({\n    apiVersion: 'v1'\n  })],\n  model: 'googleai/gemini-1.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD,EAAE;YACjB,YAAY;QACd;KAAG;IACH,OAAO;AACT","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/password-cracking-emulation.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI-powered password cracking emulation tool using Hashcat.\n *\n * - passwordCrackingEmulation - A function that emulates the password cracking process.\n * - PasswordCrackingEmulationInput - The input type for the passwordCrackingEmulation function.\n * - PasswordCrackingEmulationOutput - The return type for the passwordCrackingEmulation function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst PasswordCrackingEmulationInputSchema = z.object({\n  hash: z\n    .string()\n    .describe('The hash to crack (in HC22000 format).'),\n  mask: z\n    .string()\n    .describe('The mask to use for the Hashcat attack (e.g., ?d?d?d?d?d?d?d?d for 8 digits).'),\n});\nexport type PasswordCrackingEmulationInput = z.infer<typeof PasswordCrackingEmulationInputSchema>;\n\nconst PasswordCrackingEmulationOutputSchema = z.object({\n  crackedPassword: z\n    .string()\n    .optional()\n    .describe('The cracked password, if found.  Empty string if not found.'),\n  status: z.string().describe('The status of the cracking attempt (e.g., Cracked, Not Cracked).'),\n});\nexport type PasswordCrackingEmulationOutput = z.infer<typeof PasswordCrackingEmulationOutputSchema>;\n\nexport async function passwordCrackingEmulation(input: PasswordCrackingEmulationInput): Promise<PasswordCrackingEmulationOutput> {\n  return passwordCrackingEmulationFlow(input);\n}\n\nconst passwordCrackingEmulationPrompt = ai.definePrompt({\n  name: 'passwordCrackingEmulationPrompt',\n  input: {schema: PasswordCrackingEmulationInputSchema},\n  output: {schema: PasswordCrackingEmulationOutputSchema},\n  prompt: `You are simulating the Hashcat password cracking tool.  Given a WPA hash and a mask, determine if Hashcat would be able to crack the password.\n\nHash: {{{hash}}}\nMask: {{{mask}}}\n\nScenarios:\n\n*   If the hash is \"f6085bce4b9ccef6bf1fe616f3bcf38c:feb5d5591e5f:320ab2f2814e:nemo:24042012\" and the mask is \"?d?d?d?d?d?d?d?d\", then the password is \"24042012\" and status is \"Cracked\".\n*   If the hash is \"f6085bce4b9ccef6bf1fe616f3bcf38c:feb5d5591e5f:320ab2f2814e:nemo:24042012\" and the mask is \"?a?a?a?a?a?a?a?a\", then status is \"Not Cracked\" because the password contains only digits and the mask is for all character types.\n*   If the hash is a random hash and the mask is \"?d?d?d?d?d?d?d?d\", then status is \"Not Cracked\" because cracking a real password takes time and this is just a simulation.  Do not attempt to crack the password.\n\nReturn the cracked password if you can determine it, otherwise return an empty string.  Return \"Cracked\" or \"Not Cracked\" status.\n\nConsider these parameters for output:\n* crackedPassword\n* status`,\n});\n\nconst passwordCrackingEmulationFlow = ai.defineFlow(\n  {\n    name: 'passwordCrackingEmulationFlow',\n    inputSchema: PasswordCrackingEmulationInputSchema,\n    outputSchema: PasswordCrackingEmulationOutputSchema,\n  },\n  async input => {\n    const {output} = await passwordCrackingEmulationPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,MAAM,uIAAA,CAAA,IAAC,CACJ,MAAM,GACN,QAAQ,CAAC;IACZ,MAAM,uIAAA,CAAA,IAAC,CACJ,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,GACR,QAAQ,CAAC;IACZ,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGO,eAAe,0BAA0B,KAAqC;IACnF,OAAO,8BAA8B;AACvC;AAEA,MAAM,kCAAkC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACtD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoC;IACpD,QAAQ;QAAC,QAAQ;IAAqC;IACtD,QAAQ,CAAC;;;;;;;;;;;;;;;QAeH,CAAC;AACT;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,gCAAgC;IACvD,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n\"use server\";\n\nimport {\n  passwordCrackingEmulation,\n  type PasswordCrackingEmulationInput,\n  type PasswordCrackingEmulationOutput,\n} from \"@/ai/flows/password-cracking-emulation\";\n\nexport async function runPasswordCrackingAction(\n  input: PasswordCrackingEmulationInput\n): Promise<PasswordCrackingEmulationOutput> {\n  try {\n    const result = await passwordCrackingEmulation(input);\n    return result;\n  } catch (error) {\n    console.error(\"Error in password cracking emulation:\", error);\n    throw new Error(\"Failed to run password cracking emulation.\");\n  }\n}\n\nexport async function sendTelegramMessageAction(\n  name: string,\n  phone: string\n): Promise<{ success: boolean; message: string }> {\n  const botToken = process.env.TELEGRAM_BOT_TOKEN;\n  const chatId = process.env.TELEGRAM_CHAT_ID;\n\n  if (!botToken || !chatId) {\n    console.error(\"Telegram Bot Token or Chat ID is not configured.\");\n    return {\n      success: false,\n      message: \"فشل الإرسال، إعدادات البوت غير مكتملة.\",\n    };\n  }\n  \n  const text = `\nمتدرب جديد بدأ المحاكاة:\nالاسم: ${name}\nرقم الهاتف: ${phone}\n`;\n\n  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\n\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        chat_id: chatId,\n        text: text,\n      }),\n    });\n\n    const data = await response.json();\n\n    if (data.ok) {\n      return { success: true, message: \"تم إرسال البيانات بنجاح.\" };\n    } else {\n      console.error(\"Telegram API error:\", data);\n      return {\n        success: false,\n        message: \"فشل إرسال البيانات إلى تليجرام.\",\n      };\n    }\n  } catch (error) {\n    console.error(\"Error sending to Telegram:\", error);\n    return { success: false, message: \"حدث خطأ أثناء الاتصال بتليجرام.\" };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAGA;;;;;AAMO,eAAe,0BACpB,KAAqC;IAErC,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,uJAAA,CAAA,4BAAyB,AAAD,EAAE;QAC/C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yCAAyC;QACvD,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe,0BACpB,IAAY,EACZ,KAAa;IAEb,MAAM,WAAW,QAAQ,GAAG,CAAC,kBAAkB;IAC/C,MAAM,SAAS,QAAQ,GAAG,CAAC,gBAAgB;IAE3C,IAAI,CAAC,YAAY,CAAC,QAAQ;QACxB,QAAQ,KAAK,CAAC;QACd,OAAO;YACL,SAAS;YACT,SAAS;QACX;IACF;IAEA,MAAM,OAAO,CAAC;;OAET,EAAE,KAAK;YACF,EAAE,MAAM;AACpB,CAAC;IAEC,MAAM,MAAM,CAAC,4BAA4B,EAAE,SAAS,YAAY,CAAC;IAEjE,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,SAAS;gBACT,MAAM;YACR;QACF;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,EAAE,EAAE;YACX,OAAO;gBAAE,SAAS;gBAAM,SAAS;YAA2B;QAC9D,OAAO;YACL,QAAQ,KAAK,CAAC,uBAAuB;YACrC,OAAO;gBACL,SAAS;gBACT,SAAS;YACX;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YAAE,SAAS;YAAO,SAAS;QAAkC;IACtE;AACF;;;IA9DsB;IAYA;;AAZA,+OAAA;AAYA,+OAAA","debugId":null}},
    {"offset": {"line": 449, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {runPasswordCrackingAction as '40d7d429f4e0be2ac40fc913e605b3a92feefbb8e1'} from 'ACTIONS_MODULE0'\nexport {sendTelegramMessageAction as '60ef4ddc1b38f0d641cbb970d51385bbe6d4160eeb'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 504, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}